{"version":3,"sources":["components/Navbar.js","actions/projectTaskActions.js","actions/types.js","components/ProjectTask/ProjectTaskItem.js","components/ProjectBoard.js","components/ProjectTask/AddProjectTask.js","reducers/errorsReducer.js","reducers/projectTaskReducer.js","reducers/index.js","store.js","components/ProjectTask/UpdateProjectTask.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","addProjectTask","project_task","history","dispatch","a","axios","post","push","payload","response","data","ProjectTaskItem","pt_id","this","props","deleteProjectTask","id","summary","acceptanceCriteria","to","onClick","onDeleteClick","bind","Component","connect","window","confirm","delete","ProjectBoard","getBacklog","BoardContent","project_tasks","todoItems","inProgressItems","doneItems","length","role","tasks","map","key","i","status","Fragment","BoardAlgorithm","state","get","res","AddProjectTask","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProjectTask","classnames","placeholder","initialState","combineReducers","action","filter","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProjectTask","match","params","getProjectTask","updatedTask","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53924b0c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\r\n      <div className=\"container\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          Project Task Tool\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#mobile-nav\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_PROJECT_TASKS,\r\n  DELETE_PROJECT_TASK,\r\n  GET_PROJECT_TASK\r\n} from \"./types\";\r\n\r\nexport const addProjectTask = (project_task, history) => async dispatch => {\r\n  try {\r\n    await axios.post(\"http://localhost:8080/api/board\", project_task);\r\n    history.push(\"/\");\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const getBacklog = () => async dispatch => {\r\n  const res = await axios.get(\"http://localhost:8080/api/board/all\");\r\n  dispatch({\r\n    type: GET_PROJECT_TASKS,\r\n    payload: res.data\r\n  });\r\n};\r\n\r\nexport const deleteProjectTask = pt_id => async dispatch => {\r\n  if (\r\n    window.confirm(\r\n      `You are deleting project task ${pt_id}, this action cannot be undone`\r\n    )\r\n  ) {\r\n    await axios.delete(`http://localhost:8080/api/board/${pt_id}`);\r\n    dispatch({\r\n      type: DELETE_PROJECT_TASK,\r\n      payload: pt_id\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProjectTask = (pt_id, history) => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`http://localhost:8080/api/board/${pt_id}`);\r\n    dispatch({\r\n      type: GET_PROJECT_TASK,\r\n      payload: res.data\r\n    });\r\n  } catch (error) {\r\n    history.push(\"/\");\r\n  }\r\n};\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const GET_PROJECT_TASKS = \"GET_PROJECT_TASKS\";\r\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\r\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteProjectTask } from \"../../actions/projectTaskActions\";\r\n\r\nclass ProjectTaskItem extends Component {\r\n  onDeleteClick(pt_id) {\r\n    this.props.deleteProjectTask(pt_id);\r\n  }\r\n\r\n  render() {\r\n    const { project_task } = this.props;\r\n    return (\r\n      <div className=\"card mb-1 bg-light\">\r\n        <div className=\"card-header text-primary\">ID: {project_task.id}</div>\r\n        <div className=\"card-body bg-light\">\r\n          <h5 className=\"card-title\">{project_task.summary}</h5>\r\n          <p className=\"card-text text-truncate \">\r\n            {project_task.acceptanceCriteria}\r\n          </p>\r\n          <Link\r\n            to={`updateProjectTask/${project_task.id}`}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            View / Update\r\n          </Link>\r\n\r\n          <button\r\n            className=\"btn btn-danger ml-4\"\r\n            onClick={this.onDeleteClick.bind(this, project_task.id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectTaskItem.propTypes = {\r\n  deleteProjectTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { deleteProjectTask }\r\n)(ProjectTaskItem);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProjectTaskItem from \"./ProjectTask/ProjectTaskItem\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getBacklog } from \"../actions/projectTaskActions\";\r\n\r\nclass ProjectBoard extends Component {\r\n  componentDidMount() {\r\n    this.props.getBacklog();\r\n  }\r\n  render() {\r\n    const { project_tasks } = this.props.project_tasks;\r\n\r\n    let BoardContent;\r\n    let todoItems = [];\r\n    let inProgressItems = [];\r\n    let doneItems = [];\r\n\r\n    const BoardAlgorithm = (project_tasks) => {\r\n      if (project_tasks.length < 1) {\r\n        return (\r\n          <div className=\"alert alert-info text-center\" role=\"alert\">\r\n            No Project Tasks on this board\r\n          </div>\r\n        );\r\n      } else {\r\n        const tasks = project_tasks.map((project_task) => (\r\n          <ProjectTaskItem key={project_task.id} project_task={project_task} />\r\n        ));\r\n\r\n        for (let i = 0; i < tasks.length; i++) {\r\n          if (tasks[i].props.project_task.status === \"TO_DO\") {\r\n            todoItems.push(tasks[i]);\r\n          }\r\n\r\n          if (tasks[i].props.project_task.status === \"IN_PROGRESS\") {\r\n            inProgressItems.push(tasks[i]);\r\n          }\r\n\r\n          if (tasks[i].props.project_task.status === \"DONE\") {\r\n            doneItems.push(tasks[i]);\r\n          }\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-secondary text-white\">\r\n                      <h3>TO DO</h3>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {todoItems}\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-primary text-white\">\r\n                      <h3>In Progress</h3>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {inProgressItems}\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"card text-center mb-2\">\r\n                    <div className=\"card-header bg-success text-white\">\r\n                      <h3>Done</h3>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {doneItems}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    };\r\n\r\n    BoardContent = BoardAlgorithm(project_tasks);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to=\"/addProjectTask\" className=\"btn btn-primary mb-3\">\r\n          <i className=\"fas fa-plus-circle\"> Create Project Task</i>\r\n        </Link>\r\n        <br />\r\n        <hr />\r\n        {BoardContent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectBoard.propTypes = {\r\n  getBacklog: PropTypes.func.isRequired,\r\n  project_tasks: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  project_tasks: state.project_task,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getBacklog })(ProjectBoard);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addProjectTask } from \"../../actions/projectTaskActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass AddProjectTask extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\",\r\n      errors: {}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const newProjectTask = {\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status\r\n    };\r\n    // console.log(newProjectTask);\r\n    this.props.addProjectTask(newProjectTask, this.props.history);\r\n  }\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"addProjectTask\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <Link to=\"/\" className=\"btn btn-light\">\r\n                Back to Board\r\n              </Link>\r\n              <h4 className=\"display-4 text-center\">\r\n                Add /Update Project Task\r\n              </h4>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.summary\r\n                    })}\r\n                    name=\"summary\"\r\n                    value={this.state.summary}\r\n                    placeholder=\"Project Task summary\"\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.summary && (\r\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddProjectTask.propTypes = {\r\n  addProjectTask: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addProjectTask }\r\n)(AddProjectTask);\r\n","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  GET_PROJECT_TASKS,\r\n  DELETE_PROJECT_TASK,\r\n  GET_PROJECT_TASK\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  project_tasks: [],\r\n  project_task: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_PROJECT_TASKS:\r\n      return {\r\n        ...state,\r\n        project_tasks: action.payload\r\n      };\r\n\r\n    case GET_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_task: action.payload\r\n      };\r\n\r\n    case DELETE_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_tasks: state.project_tasks.filter(\r\n          project_task => project_task.id !== action.payload\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport errorsReducer from \"./errorsReducer\";\r\nimport projectTaskReducer from \"./projectTaskReducer\";\r\n\r\nexport default combineReducers({\r\n  //\r\n  errors: errorsReducer,\r\n  project_task: projectTaskReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst ReactReduxDevTools =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nlet store;\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\r\n  store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(...middleware),\r\n      ReactReduxDevTools\r\n    )\r\n  );\r\n} else {\r\n  store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware))\r\n  );\r\n}\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  getProjectTask,\r\n  addProjectTask\r\n} from \"../../actions/projectTaskActions\";\r\n\r\nclass UpdateProjectTask extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: \"\",\r\n      summary: \"\",\r\n      acceptanceCriteria: \"\",\r\n      status: \"\",\r\n      errors: {}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n\r\n    const { id, summary, acceptanceCriteria, status } = nextProps.project_task;\r\n\r\n    this.setState({\r\n      id,\r\n      summary,\r\n      acceptanceCriteria,\r\n      status\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { pt_id } = this.props.match.params;\r\n    this.props.getProjectTask(pt_id);\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const updatedTask = {\r\n      id: this.state.id,\r\n      summary: this.state.summary,\r\n      acceptanceCriteria: this.state.acceptanceCriteria,\r\n      status: this.state.status\r\n    };\r\n\r\n    this.props.addProjectTask(updatedTask, this.props.history);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div className=\"addProjectTask\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <a href=\"/\" className=\"btn btn-light\">\r\n                Back to Board\r\n              </a>\r\n              <h4 className=\"display-4 text-center\">\r\n                Add /Update Project Task\r\n              </h4>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.summary\r\n                    })}\r\n                    name=\"summary\"\r\n                    placeholder=\"Project Task summary\"\r\n                    value={this.state.summary}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.summary && (\r\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control form-control-lg\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                    name=\"acceptanceCriteria\"\r\n                    value={this.state.acceptanceCriteria}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"form-control form-control-lg\"\r\n                    name=\"status\"\r\n                    value={this.state.status}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TO_DO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUpdateProjectTask.propTypes = {\r\n  project_task: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n  getProjectTask: PropTypes.func.isRequired,\r\n  addProjectTask: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  project_task: state.project_task.project_task,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getProjectTask, addProjectTask }\r\n)(UpdateProjectTask);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport ProjectBoard from \"./components/ProjectBoard\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport AddProjectTask from \"./components/ProjectTask/AddProjectTask\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport UpdateProjectTask from \"./components/ProjectTask/UpdateProjectTask\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Navbar />\r\n            <Route exact path=\"/\" component={ProjectBoard} />\r\n\r\n            <Route exact path=\"/addProjectTask\" component={AddProjectTask} />\r\n            <Route\r\n              exact\r\n              path=\"/updateProjectTask/:pt_id\"\r\n              component={UpdateProjectTask}\r\n            />\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}